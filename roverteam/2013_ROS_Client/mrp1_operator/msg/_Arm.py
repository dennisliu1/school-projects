"""autogenerated by genpy from mrp1_operator/Arm.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Arm(genpy.Message):
  _md5sum = "83ae2c0b65840685d2cff1997b2f079d"
  _type = "mrp1_operator/Arm"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 elbow1
float64 elbow2
float64 endeffector
float64 SBase
float64 SYaw
float64 SPitch
float64 SRoll
"""
  __slots__ = ['elbow1','elbow2','endeffector','SBase','SYaw','SPitch','SRoll']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       elbow1,elbow2,endeffector,SBase,SYaw,SPitch,SRoll

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Arm, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.elbow1 is None:
        self.elbow1 = 0.
      if self.elbow2 is None:
        self.elbow2 = 0.
      if self.endeffector is None:
        self.endeffector = 0.
      if self.SBase is None:
        self.SBase = 0.
      if self.SYaw is None:
        self.SYaw = 0.
      if self.SPitch is None:
        self.SPitch = 0.
      if self.SRoll is None:
        self.SRoll = 0.
    else:
      self.elbow1 = 0.
      self.elbow2 = 0.
      self.endeffector = 0.
      self.SBase = 0.
      self.SYaw = 0.
      self.SPitch = 0.
      self.SRoll = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.elbow1, _x.elbow2, _x.endeffector, _x.SBase, _x.SYaw, _x.SPitch, _x.SRoll))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.elbow1, _x.elbow2, _x.endeffector, _x.SBase, _x.SYaw, _x.SPitch, _x.SRoll,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.elbow1, _x.elbow2, _x.endeffector, _x.SBase, _x.SYaw, _x.SPitch, _x.SRoll))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.elbow1, _x.elbow2, _x.endeffector, _x.SBase, _x.SYaw, _x.SPitch, _x.SRoll,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
