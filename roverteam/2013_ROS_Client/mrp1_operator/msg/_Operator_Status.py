"""autogenerated by genpy from mrp1_operator/Operator_Status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Operator_Status(genpy.Message):
  _md5sum = "4ed4e3c400c00fd0533baa55aa4583e6"
  _type = "mrp1_operator/Operator_Status"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 cameraNum
int8 cameraStatus
int8 PIPNum
int8 PIPStatus
int8 toggleHUD
int8 expandMap
int8 mapStatus
int8 toggleHelp
"""
  __slots__ = ['cameraNum','cameraStatus','PIPNum','PIPStatus','toggleHUD','expandMap','mapStatus','toggleHelp']
  _slot_types = ['int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cameraNum,cameraStatus,PIPNum,PIPStatus,toggleHUD,expandMap,mapStatus,toggleHelp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Operator_Status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cameraNum is None:
        self.cameraNum = 0
      if self.cameraStatus is None:
        self.cameraStatus = 0
      if self.PIPNum is None:
        self.PIPNum = 0
      if self.PIPStatus is None:
        self.PIPStatus = 0
      if self.toggleHUD is None:
        self.toggleHUD = 0
      if self.expandMap is None:
        self.expandMap = 0
      if self.mapStatus is None:
        self.mapStatus = 0
      if self.toggleHelp is None:
        self.toggleHelp = 0
    else:
      self.cameraNum = 0
      self.cameraStatus = 0
      self.PIPNum = 0
      self.PIPStatus = 0
      self.toggleHUD = 0
      self.expandMap = 0
      self.mapStatus = 0
      self.toggleHelp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8b.pack(_x.cameraNum, _x.cameraStatus, _x.PIPNum, _x.PIPStatus, _x.toggleHUD, _x.expandMap, _x.mapStatus, _x.toggleHelp))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.cameraNum, _x.cameraStatus, _x.PIPNum, _x.PIPStatus, _x.toggleHUD, _x.expandMap, _x.mapStatus, _x.toggleHelp,) = _struct_8b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8b.pack(_x.cameraNum, _x.cameraStatus, _x.PIPNum, _x.PIPStatus, _x.toggleHUD, _x.expandMap, _x.mapStatus, _x.toggleHelp))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.cameraNum, _x.cameraStatus, _x.PIPNum, _x.PIPStatus, _x.toggleHUD, _x.expandMap, _x.mapStatus, _x.toggleHelp,) = _struct_8b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8b = struct.Struct("<8b")
